# cloudbuild.yaml

options:
  logging: CLOUD_LOGGING_ONLY

availableSecrets:
  secretManager:
    - versionName: projects/daytrader-dev-security/secrets/pgs-ins-bucket-name/versions/latest
      env: PGS_INS_BUCKET_NAME
    - versionName: projects/daytrader-dev-security/secrets/pgs-ins-region/versions/latest
      env: PGS_INS_REGION
    - versionName: projects/daytrader-dev-security/secrets/pgs-ins-project/versions/latest
      env: PGS_INS_PROJECT

steps:
  # 步骤 1: 设置 GCP 项目
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud config set project "$PGS_INS_PROJECT"

  # 步骤 2: 检查或创建 GCS 存储桶
  - name: 'gcr.io/cloud-builders/gsutil'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if gsutil ls -b "gs://${PGS_INS_BUCKET_NAME}" >/dev/null 2>&1; then
          echo "Bucket already exists: gs://${PGS_INS_BUCKET_NAME}"
        else
          gsutil mb -p "$PGS_INS_PROJECT" -l "$PGS_INS_REGION" "gs://${PGS_INS_BUCKET_NAME}"
          echo "Created bucket: gs://${PGS_INS_BUCKET_NAME}"
        fi

  # 步骤 3: 初始化 Terraform
  - name: 'hashicorp/terraform'
    entrypoint: 'terraform'
    args:
      - 'init'

  # 步骤 4: Terraform Plan
  - name: 'hashicorp/terraform'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        terraform plan \
          -var "bucket_name=$PGS_INS_BUCKET_NAME" \
          -var "region=$PGS_INS_REGION" \
          -var "project=$PGS_INS_PROJECT" \
          -var-file="${_VAR_ENV_NAME}.tfvars" \
          -out=plan.out

  # 步骤 5: Terraform Apply
  - name: 'hashicorp/terraform'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        terraform apply -auto-approve plan.out

  # 步骤 6: 完成部署
  - name: 'alpine'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Deployment Complete for $PGS_INS_PROJECT"
