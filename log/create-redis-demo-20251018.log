owanghto@cloudshell:~/redis (daytrader-dev-data)$ ./deploy.sh demo
设置 GCP 项目: daytrader-dev-data
Updated property [core/project].
检查或创建 GCS 存储桶: gs://bucket-daytrader-dev-data
存储桶已存在: gs://bucket-daytrader-dev-data
初始化 Terraform

Initializing the backend...

Initializing provider plugins...
- Finding hashicorp/google versions matching ">= 6.1.0"...
- Installing hashicorp/google v7.7.0...
- Installed hashicorp/google v7.7.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
执行 Terraform Plan: demo.tfvars
Acquiring state lock. This may take a few moments...

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # google_redis_instance.redis will be created
  + resource "google_redis_instance" "redis" {
      + alternative_location_id     = (known after apply)
      + auth_enabled                = false
      + auth_string                 = (sensitive value)
      + authorized_network          = "vpc-daytrader-dev-data"
      + connect_mode                = "PRIVATE_SERVICE_ACCESS"
      + create_time                 = (known after apply)
      + current_location_id         = (known after apply)
      + effective_labels            = {
          + "daytrader-demo"             = "redis-instance-demo"
          + "goog-terraform-provisioned" = "true"
        }
      + effective_reserved_ip_range = (known after apply)
      + host                        = (known after apply)
      + id                          = (known after apply)
      + labels                      = {
          + "daytrader-demo" = "redis-instance-demo"
        }
      + location_id                 = (known after apply)
      + maintenance_schedule        = (known after apply)
      + maintenance_version         = (known after apply)
      + memory_size_gb              = 5
      + name                        = "daytrader-redis-demo"
      + nodes                       = (known after apply)
      + persistence_iam_identity    = (known after apply)
      + port                        = (known after apply)
      + project                     = "daytrader-dev-data"
      + read_endpoint               = (known after apply)
      + read_endpoint_port          = (known after apply)
      + read_replicas_mode          = (known after apply)
      + redis_configs               = {
          + "maxmemory-policy" = "allkeys-lru"
        }
      + redis_version               = "REDIS_7_2"
      + region                      = "asia-northeast3"
      + replica_count               = 0
      + reserved_ip_range           = (known after apply)
      + secondary_ip_range          = (known after apply)
      + server_ca_certs             = (known after apply)
      + terraform_labels            = {
          + "daytrader-demo"             = "redis-instance-demo"
          + "goog-terraform-provisioned" = "true"
        }
      + tier                        = "BASIC"
      + transit_encryption_mode     = "DISABLED"

      + maintenance_policy {
          + create_time = (known after apply)
          + update_time = (known after apply)

          + weekly_maintenance_window {
              + day      = "SUNDAY"
              + duration = (known after apply)

              + start_time {
                  + hours   = 19
                  + minutes = 0
                }
            }
        }
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + instance_id        = (known after apply)
  + redis_auth_enabled = false
  + redis_host         = (known after apply)
  + redis_port         = (known after apply)

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Saved the plan to: plan.out

To perform exactly these actions, run the following command to apply:
    terraform apply "plan.out"
执行 Terraform Apply
Acquiring state lock. This may take a few moments...
google_redis_instance.redis: Creating...
google_redis_instance.redis: Still creating... [10s elapsed]
google_redis_instance.redis: Still creating... [20s elapsed]
google_redis_instance.redis: Still creating... [30s elapsed]
google_redis_instance.redis: Still creating... [40s elapsed]
google_redis_instance.redis: Still creating... [50s elapsed]
google_redis_instance.redis: Still creating... [1m0s elapsed]
google_redis_instance.redis: Still creating... [1m10s elapsed]
google_redis_instance.redis: Still creating... [1m20s elapsed]
google_redis_instance.redis: Still creating... [1m30s elapsed]
google_redis_instance.redis: Still creating... [1m40s elapsed]
google_redis_instance.redis: Still creating... [1m50s elapsed]
google_redis_instance.redis: Still creating... [2m0s elapsed]
google_redis_instance.redis: Still creating... [2m10s elapsed]
google_redis_instance.redis: Still creating... [2m20s elapsed]
google_redis_instance.redis: Still creating... [2m30s elapsed]
google_redis_instance.redis: Still creating... [2m40s elapsed]
google_redis_instance.redis: Still creating... [2m50s elapsed]
google_redis_instance.redis: Still creating... [3m0s elapsed]
google_redis_instance.redis: Still creating... [3m10s elapsed]
google_redis_instance.redis: Still creating... [3m20s elapsed]
google_redis_instance.redis: Still creating... [3m30s elapsed]
google_redis_instance.redis: Still creating... [3m40s elapsed]
google_redis_instance.redis: Still creating... [3m50s elapsed]
google_redis_instance.redis: Still creating... [4m0s elapsed]
google_redis_instance.redis: Still creating... [4m10s elapsed]
google_redis_instance.redis: Still creating... [4m20s elapsed]
google_redis_instance.redis: Still creating... [4m30s elapsed]
google_redis_instance.redis: Still creating... [4m40s elapsed]
google_redis_instance.redis: Still creating... [4m50s elapsed]
google_redis_instance.redis: Still creating... [5m0s elapsed]
google_redis_instance.redis: Still creating... [5m10s elapsed]
google_redis_instance.redis: Still creating... [5m20s elapsed]
google_redis_instance.redis: Creation complete after 5m25s [id=projects/daytrader-dev-data/locations/asia-northeast3/instances/daytrader-redis-demo]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

Outputs:

instance_id = "projects/daytrader-dev-data/locations/asia-northeast3/instances/daytrader-redis-demo"
redis_auth_enabled = false
redis_host = "10.188.235.3"
redis_port = 6379
Redis 部署完成
owanghto@cloudshell:~/redis (daytrader-dev-data)$